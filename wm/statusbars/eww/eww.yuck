;; Variables
(defpoll clock_hour :interval "5m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10h" "date +'%a %_d %b'")
(defpoll volume_percent :interval "3s" "amixer sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll mic_percent :interval "3s" "amixer sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll caldenar_day :interval "20h" "date '+%_d'")
(defpoll calendar_year :interval "20h" "date '+%Y")
(defvar vol_reveal false)
(defvar wifi_reveal false)
(defvar time_reveal false)
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces.sh")
(deflisten current_workspace :intial "..." "bash ~/.config/eww/scripts/get-active-workspace.sh")
(deflisten urgent_workspace :intial "..." "bash ~/.config/eww/scripts/get-urgent-workspaces.sh")

(defvar eww "eww -c $HOME/.config/eww")

(defwindow statusbar
 :monitor 0
 :geometry (geometry :x "90%"
                     :y "10px"
                     :width "100%"
                     :height "30px"
                     :anchor "top center")
 :stacking "fg"
 :exclusive true
 :focusable false
 (box :orientation "horizontal"
      :halign "fill"
      :hexpand true
      (box :orientation "horizontal"
           :halign "start"
           :hexpand true
           (_workspaces))
      (box :orientation "horizontal"
           :halign "center"
           (clock_module))
      (box :orientation "horizontal"
           :halign "end"
           :hexpand true
           (volume)
           (battery :capacity {EWW_BATTERY.BAT0.capacity}
                    :status {EWW_BATTERY.BAT0.status}))))

(defwidget sep []
 (box :vexpand false :hexpand false
  (label :class "separator" :text "|")))

(defwidget _workspaces []
 (eventbox :onscroll "bash ~/.config/ewww/scripts/change-current-workspace.sh {} ${current_workspace}"
           :class "workspaces-widget"
  (box :space-evenly true
   (label :text "${workspaces}${current_workspace}${urgent_workspace}" :visible false)
   (for workspace in workspaces
    (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
     (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"} ${workspace.id == urgent_workspace ? "urgent" : ""}"
      (image :path "icons/radio_button_${workspace.id == current_workspace ? "on" : "off" }.svg"
             :image-height 20
             :image-width 20)))))))

(defwidget clock_module []
 (eventbox :onhover "eww update time_reveal=true"
           :onhoverlost "eww update time_reveal=false"
  (box :space-evenly "false" :orientation "h" :spacing "3"
   (label :text clock_hour)
   (label :text ":")
   (label :text clock_minute)
   (revealer :transition "slideleft"
             :reveal time_reveal
             :duration "350ms"
             (label :text clock_date)))))

(defwidget volume []
 (eventbox :onhover "eww update vol_reveal=true"
           :onhoverlost "eww update vol_reveal=false"
  (box :space-evenly false :orientation "h" :spacing "3"
   (button :onclick "~/.config/eww/scripts/pop.sh audio_ctl" "")
   (revealer :transition "slideleft"
             :reveal vol_reveal
             :duration "350ms"
    (scale :class "volbar"
           :value volume_percent
           :orientation "h"
           :tooltip "${volume_percent}%"
           :max 100
           :min 0
           :onchange "amixer sset Master {}%")))))

(defwidget battery [capacity status]
 (box :orientation "horizontal"
      (label :text "${capacity}")
      (image :path "icons/battery_${status == 'Charging' ? "charging" :
        capacity > 80 ? "100" :
        capacity > 60 ? "80" :
        capacity > 40 ? "60" :
        capacity > 20 ? "40" : "20"}.png"
             :image-height 20
             :image-width 20)))

(defwidget audio []
 (box :class "audio-box" :orientation "v" :space-evenly false :vexpand false :hexpand false
  (box :halign "v" :space-evenly false :hexpand false :vexpand false
   (box :class "speaker_icon" :orientation "v")
   (box :orientation "v" :halign "center" :vexpand false :hexpand false
    (label :class "speaker_text" :text "speaker" :valign "center" :halign "left")
    (box :class "speaker_bar" :halign "center" :vexpand false :hexpand false
     (scale :value volume_percent
            :space-evenly false
            :orientation "h"
            :onchange "amixer sset Master {}%"
            :tooltip "volume on ${volume_percent}%"
            :max 100
            :min 0))))
  (label :text "" :class "audio_sep" :halign "center")
  (box :halign "v" :space-evenly false :hexpand false :vexpand false
   (box :class "mic_icon" :orientation "v")
   (box :orientation "v" :halign "center" :vexpand false :hexpand false
    (label :class "mic_text" :text "mic" :valign "center" :halign "left")
    (box :class "mic_bar" :halign "center" :vexpand false :hexpand false
     (scale :value mic_percent
            :space-evenly false
            :orientation "h"
            :tooltip "mic on ${mic_percent}%"
            :onchange "amixer sset Capture {}%"
            :max 100
            :min 0))))))

(defwindow audio_ctl :monitor 0
                     :geometry (geometry :x "-20px"
                                         :y "7%"
                                         :anchor "top right"
                                         :width "280px"
                                         :height "60px")
 (audio))
